import requests
from aiogram import types
from aiogram.enums import ParseMode
from aiogram import Bot
from insertapi.login import authenticate_and_create_chat
from utils.dbconnect import Request
from typing import Dict
from keyboards.credits import credits_keyboard
from keyboards.feedback import feedback_keyboard
from aiogram.utils import markdown
import re

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è user_id –∏ chat_id
user_chat_mapping: Dict[int, str] = {}

async def handle_user_message(message: types.Message, bot: Bot, request: Request):
    user_id = message.from_user.id
    
    # Authenticate and create chat_id
    chat_id = authenticate_and_create_chat(user_id)

    # Check if the user has at least one credit
    enough_credits = await Request.check_credits(user_id, request.connector)

    if enough_credits:
        # Process the message and generate a response
        # [The rest of your code remains the same until the credit deduction part]

                # Deduct one credit from the database
                await Request.subtract_credits(user_id, request.connector)

                # [Rest of your code for response handling]
    else:
        # Inform the user about insufficient credits
        await bot.send_message(chat_id=message.chat.id, text="You don't have enough credits. Please purchase more.", reply_markup=credits_keyboard)

def process_message_text(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å I{ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–∞ }
    if text.startswith("I ") and text.endswith("."):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É I{ –∏ }
        inner_text = text[2:-1]

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ç–µ–∫—Å—Ç—É
        italic_text = markdown.markdown(inner_text, extensions=['italic'])

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∏–≤–æ–º
        return italic_text
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def process_feedback(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    if callback_query.data == "like":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
        await callback_query.answer(text="Thank you for your positive feedback! üòä", show_alert=True)
        await bot.send_message(text='üíã', chat_id=callback_query.message.chat.id)
    elif callback_query.data == "dislike":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await callback_query.answer(text="Your feedback has been forwarded to the developer for review. Thank you for your input! üôè", show_alert=True)


        